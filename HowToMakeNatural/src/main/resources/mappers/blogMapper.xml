<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="blogMapper">
	<!-- 블로그 메인 페이지의 글 가져오기 -->
    <!-- A. 아이디 값 존재 O => 해당 유저의 블로그에 대한 글  가져오기 -->
    <!-- A-1. 카테고리 값 존재 O => 해당 유저의 블로그에서 해당 카테고리에 대한 글  가져오기 (태그 값과 별개) -->
    <!-- A-2. 태그 값 존재 O => 해당 유저의 블로그에서 해당 태그에 대한 글  가져오기 (카테고리 값과 별개)-->
    <!-- A-3. 검색 값 존재 O => 해당 유저의 블로그에서 해당 값에 대하여 제목과 내용으로 검색하여 글 가져오기-->
    <!-- B. 아이디 값 존재 X => 블로그 메인에 대한 글 가져오기 -->
    <!-- B-1. 카테고리 값 존재 O => 블로그 메인에서 해당 값에 대한 카테고리 및 태그 모두 검색 -->
    <!-- B-2. 검색 값 존재 O => 블로그 메인에서 해당 값에 대한 카테고리 및 태그 모두 검색 -->
    <select id="selectPost" parameterType="hashmap" resultType="hashmap">
		SELECT a.*, ROW_NUMBER() OVER (ORDER BY no DESC) AS orderNo FROM (
      		SELECT
      			count(title) OVER(PARTITION BY 1) count, no, 
      			title, content, category, tag, 
      			DATE_FORMAT(signdate, '%Y-%m-%d %p %h:%i') signdate, userID, (SELECT blog_nickname FROM user WHERE id=b.userID) userNickName,
      			 (SELECT count(no) FROM blog_comment WHERE post_no=b.no and useYN ='Y') commentCount,
      			 (SELECT count(userID) FROM blog_good WHERE post_no=b.no) goodCount
      		FROM blog_post b
      		<if test='userID != null and userID != ""'>
				where userID=#{userID}
				<if test='category != null and category != ""'>
					and category = #{category}
 				</if>
				<if test='tag != null and tag != ""'>
					and tag like '%${tag}%'
 				</if>
				<if test='search != null and search != ""'>
					<![CDATA[
						and (REGEXP_REPLACE(title, '<[^>]*>|\&([^;])*;', '') LIKE '%${search}%' or REGEXP_REPLACE(content, '<[^>]*>|\&([^;])*;', '') LIKE '%${search}%')
				    ]]>
 				</if>
				<if test='no != null and no != ""'>
					and no = ${no}
 				</if>
 				and useYN ='Y'
 			</if>
      		<if test='userID == null or userID == ""'>
				<if test='category != null and category != ""'>
					where category like '%${category}%' or tag like '%${category}%' and useYN ='Y'
 				</if>
				<if test='object != null and object != ""'>
					<if test='object =="post"'>
						<![CDATA[
							where (REGEXP_REPLACE(title, '<[^>]*>|\&([^;])*;', '') LIKE '%${search}%' or REGEXP_REPLACE(content, '<[^>]*>|\&([^;])*;', '') LIKE '%${search}%') and useYN ='Y'
	 					]]>
	 				</if>
					<if test='object =="theme"'>
						where (category like '%${search}%' or tag like '%${search}%') and useYN ='Y'
	 				</if>
					<if test='object =="writer"'>
						where (userID like '%${search}%' or userNickName like '%${search}%') and useYN ='Y'
	 				</if>
 				</if>
				<if test='(category == null or category == "") and (object == null or object == "")'>
					where useYN ='Y'
 				</if>
 			</if>
			<!-- and b.userID = u.id -->
      		order by no desc
			) a
		<if test='block == null or block == ""'>
			limit ${start},5
		</if>
		<if test='block != null and block != ""'>
			limit ${start},${block}
		</if>
    </select>
    
    <!-- 게시글 추가 -->
    <insert id="insertPost" parameterType="hashmap">
    	insert into blog_post(title, content, category, tag, signdate, userID)
    	values (#{title}, #{content}, #{category}, #{tag}, NOW(), #{userID})
    </insert>
    
    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="hashmap">
    	update
    		blog_post
   		set
   			title=#{title}, content=#{content},
   			category=#{category}, tag=#{tag}, updatedate=NOW()
		where
			no=#{no}
    </update>
    
    <!-- 게시글 삭제 -->
    <update id="deletePost" parameterType="hashmap">
    	update
    		blog_post
   		set
    		useYN ='N'
   		where
   			no=#{no}
    </update>
    
    
    
    <!-- 댓글 가져오기 -->
    <select id="selectComment" parameterType="hashmap" resultType="hashmap">
    	SELECT
    		b.no, b.content, b.userID, u.blog_nickname userNickname,
    		DATE_FORMAT(signdate, '%Y-%m-%d %p %h:%i') signdate
		FROM
			blog_comment b, user u
		WHERE
			post_no=${no} AND b.userID = u.id AND useYN = "Y"
		ORDER BY NO desc
    </select>
    
    <!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="hashmap">
    	insert into blog_comment(content, post_no, signdate, userID)
    	values (#{content}, #{no}, NOW(), #{userID})
    </insert>
    
    <!-- 댓글 추가 -->
    <update id="updateComment" parameterType="hashmap">
    	update
    		blog_comment
    	set
    		content=#{content}, updatedate=NOW()
    	where
    		no=${no} and userID=#{userID}
    </update>
    
    <!-- 댓글 삭제 -->
    <update id="deleteComment" parameterType="hashmap">
    	update
    		blog_comment
    	set
    		useYN="N"
    	where
    		no=${no} and userID=#{userID}
    </update>
    
    
    
    <!--  카테고리 목록 검색  -->
    <select id="selectCategory" parameterType="hashmap" resultType="hashmap">
    	select
    		category_name, count
   		from
   			blog_category
  		where
  			userID = #{userID} and useYN = "Y"
 		order by category_order_no, no
    </select>
    
    
    
    <!-- 이웃목록 검색 -->
    <select id="selectNeighbor" parameterType="hashmap" resultType="hashmap">
    	select
    		count(target) OVER(PARTITION BY 1) count, target,
    		(SELECT blog_nickname FROM user WHERE id=b.target) nickname,
    		(SELECT blog_profile_image FROM user WHERE id=b.target) blog_profile_image
   		from
   			blog_neighbor b
		where
			id = #{userID}
		order by no
		limit ${start},9
    </select>
    
    <!--  이웃 여부 확인  -->
    <select id="checkMyNeighbor" parameterType="hashmap" resultType="integer">
    	select
    		IFNULL(count(target), 0) count
   		from
   			blog_neighbor
  		where
  			id = #{userID} and target = #{target}
    </select>
    
    <!--  이웃 추가  -->
    <update id="addNeighbor" parameterType="hashmap">
   		insert into blog_neighbor(id, target)
    	values (#{userID}, #{target})
    </update>
    
    <!--  이웃 삭제  -->
    <delete id="cancleNeighbor" parameterType="hashmap">
    	delete
    	from
    		blog_neighbor
   		where
   			id = #{userID} and target = #{target}
    </delete>
    
    
    
    <!-- 좋아요 목록 확인 -->
    <select id="selectGood" parameterType="hashmap" resultType="int">
    	select
    		count(userID) target
   		from
   			blog_good
		where
			post_no = ${no}
    </select>
    
    <!-- 좋아요 목록 확인 -->
    <select id="checkMyGood" parameterType="hashmap" resultType="int">
    	select
    		count(userID) count
   		from
   			blog_good
		where
			post_no = ${no} and userID = #{userID}
    </select>
    
    <!--  좋아요 추가  -->
    <insert id="addGood" parameterType="hashmap">
   		insert into blog_good(post_no, userID)
    	values (#{no}, #{userID})
    </insert>
    
    <!-- 좋아요 삭제  -->
    <delete id="cancleGood" parameterType="hashmap">
    	delete
    	from
    		blog_good
   		where
   			userID = #{userID} and post_no = #{no}
    </delete>
</mapper>